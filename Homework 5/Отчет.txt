Домашнее задание №5
Выполнил: Бажов Н.С. БПИ203

Номер варианта: 4

Задание:
Обедающие философы.

Пять философов сидят возле круглого
стола. Они проводят жизнь, чередуя приемы пищи и размышления. В центре
стола находится большое блюдо спагетти. Спагетти длинные и запутанные,
философам тяжело управляться с ними, поэтому каждый из них, что бы
съесть порцию, должен пользоваться двумя вилками. К несчастью,
философам дали только пять вилок. Между каждой парой философов лежит
одна вилка, поэтому эти высококультурные и предельно вежливые люди
договорились, что каждый будет пользоваться только теми вилками, которые
лежат рядом с ним (слева и справа). Написать многопоточную программу,
моделирующую поведение философов с помощью семафоров. Программа
должна избегать фатальной ситуации, в которой все философы голодны, но
ни один из них не может взять обе вилки (например, каждый из философов
держит по одной вилки и не хочет отдавать ее). Решение должно быть
симметричным, то есть все потоки-философы должны выполнять один и
тот же код.


Число интерфейсных модулей: 3
Число модулей реализации: 4
Размер исходных текстов: 4,2 кБ

Описание решения:

Я создал 3 сущности:
	философ
	официант
	вилка

В методе main происходит инициализация всех массивов с этими сущностями.

Затем каждый философ(являющийся отдельным потоком) начинает свою "жизнедеятельность":
	5 итераций у каждого, то есть каждый философ подумает и поест 5 раз.
	
	есть 4 стадии:
	1. Размышления - текущий поток философа засыпает на случайное количество времени (от 1 до 3 секунд).
	2. Попытка взять правую вилку - философ обращается к официанту и спрашивает "есть ли у меня возможность покушать?". Официант отвечает "да", если обе вилки философа свободны, и "нет", если занята одна из них.
	При положительном ответе, философ занимает правую от себя вилку. В этот момент эта вилка блокируется для остальных с помощью mutex.lock() и дополнительными флагами доступа (представлены в виде bool переменных).
	При отрицательном ответе, философ входит в бесконечный цикл и постоянно спрашивает официанта о возможности взять вилки.
	3. Взятие левой вилки - Философ берет левую вилку, так как она точно свободна. Это следует из того, что правую вилку не сможет взять ни один философ, пока занята левая. Даже если два философа одновременно захотят взять одну вилку, mutex им этого не даст, и поток философа просто остановится и будет ждать освобождения левой вилки.
	4. Принятие пищи - пототекущий поток философа засыпает на случайное количество времени (от 1 до 3 секунд). Затем он отдает официанту вилки. При этом с вилок снимается флаг занятости и mutex.unlock().
	
После каждого приема пищи, выводится счетчик в виде "[x/5]", где х это количество завершенных приемов пищи.

Связка философов и вилок происходит с помощью их индексов следующим образом:
	правая вилка философа с индексом х имеет индекс (х + 1) % 5, а левая - х.
	то есть для 0 философа, правая вилка имеет индекс 1, а левая - 0 и тд.
	
Создается массив из 5 философов, массив из 5 вилок и 1 официант. Каждый философ имеет указатель на официанта, который в свою очередь имеет указатель на массив вилок.

В задании сказано использовать семафор для синхронизации. В моем решении в качестве семафора выступает официант. Все запросы на вилки от философов идут к нему, а затем он решает, когда философы могут взять вилки, что недопускает ситуации, описанной в условии.
	
Это решение подразумевает под собой реализацию модели "клиент сервер", однако я не создаю отдельный поток для официанта. Я формирую очередь благодаря бесконечному циклу из попыток философоф взять правую вилку. Но наверное "правильнее" было бы сделать с дополнительным потоком для официанта и созданием очереди из запросов философоф. Но я отказался от этой идеи, так как мне кажется, что мое решение выполняет такие же функции.
